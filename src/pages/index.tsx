import type { NextPage } from "next";
import Head from "next/head";
import s from "../styles/Home.module.css";
import useSWRImmutable from "swr/immutable";
import { usePokemonClient } from "./_app";

// export enum Endpoints {
//   Pokemon = "pokemon",
// }

// class PokemonClient {
//   public api: KyInstance;

//   constructor() {
//     this.api = ky.create({ prefixUrl: "https://pokeapi.co/api/v2" });
//   }

//   public async listPokemons(
//     offset?: number,
//     limit?: number,
//   ): Promise<NamedAPIResourceList> {
//     return new Promise<NamedAPIResourceList>((resolve, reject) => {
//       this.api
//         .get(`${Endpoints.Pokemon}?offset=${offset || 0}&limit=${limit || 20}`)
//         .then((response) => resolve(response.json()))
//         .catch((error) => reject(error));
//     });
//   }
// }

type Pokemon = {
  name: string;
  url: string;
};

// export type NamedAPIResource = {
//   /** The name of the referenced resource */
//   name: string;
//   /** The URL of the referenced resource */
//   url: string;
// };

// export type NamedAPIResourceList = {
//   /** The total number of resources available from this API */
//   count: number;
//   /** The URL for the next page in the list */
//   next: string | null;
//   /** The URL for the previous page in the list */
//   previous: string | null;
//   /** A list of named API resources */
//   results: NamedAPIResource[];
// };

// const client = new PokemonClient();

const PokemonList = ({ pokemons }: { pokemons: Array<Pokemon> }) => {
  return (
    <div>
      {pokemons.map((p) => (
        <PokemonCard key={p.name} pokemon={p} />
      ))}
    </div>
  );
};

const PokemonCard = ({ pokemon }: { pokemon: Pokemon }) => {
  const { name, url } = pokemon;
  return (
    <div>
      <div>{name}</div>
      <div>{url}</div>
    </div>
  );
};

const usePokemons = (
  props: Partial<Parameters<typeof pokemonClient.listPokemons>> = [],
) => {
  const pokemonClient = usePokemonClient();
  return useSWRImmutable(["pokemons"], () =>
    pokemonClient.listPokemons(...props),
  );
};

const HomeContent = () => {
  const { data, isLoading, error } = usePokemons();

  if (!data || isLoading) return <div>loading...</div>;

  if (error) return <div>error</div>;

  return <PokemonList pokemons={data.results} />;
};

const Home: NextPage = () => {
  return (
    <div className={s.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={s.main}>
        <HomeContent />
      </main>
    </div>
  );
};

export default Home;